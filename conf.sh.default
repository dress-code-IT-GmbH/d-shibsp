#!/usr/bin/env bash

main() {
    SCRIPTDIR=$(cd $(dirname $BASH_SOURCE[0]) && pwd)
    source $SCRIPTDIR/dscripts/conf_lib.sh  $@         # load library functions
    configlib_version=2  # compatible version of conf_lib.sh
    check_version $configlib_version
    # do_not_build $@ # uncomment this line to pull/load image
    init_sudo
    _set_volume_root
    _set_image_and_container_name
    _set_users
    _set_buildargs
    _set_run_args
}


_set_volume_root() {
    # container volumes mounted to host paths, or symlinks to docker volumes
    dockervol_short='/dv'
    dockerlog_short='/dl'
    if [[ "$TRAVIS" == "true" ]] || [[ ! -z ${JENKINS_HOME+x} ]]; then
        dockervol_short='./dv';
        dockerlog_short='./dl';
    fi
    mkdir -p $dockervol_short $dockerlog_short
    DOCKER_VOLUME_ROOT='/var/lib/docker/volumes'  # hard coded - check for your config if applicable!
}


_set_image_and_container_name() {
    # imgid qualifies image, container, user and IP adddress; this is helpful for managing
    # processes on the docker host etc.
    imgid='05'
    local projshort='shibsp'  # lowercase!
    export SERVICEDESCRIPTION=sp.example.org  # no blanks!
    #export DOCKER_REGISTRY_USER='myuser'  # overwrite default user 'local'
    #export DOCKER_REGISTRY_HOST='localhost:5000'  # overwrite default registry host
    set_docker_registry
    export IMAGENAME="${DOCKER_REGISTRY_USER}/${projshort}${imgid}"
    export CONTAINERNAME="${imgid}${projshort}"
}


_set_users() {
    export SHIBDUSER="shibd${imgid}"
    export SHIBDUID="3430${imgid}"
    export HTTPDUSER="httpd${imgid}"
    export HTTPDUID="3440${imgid}"
    export START_AS_ROOT='True'      # 'True' e.g. for apache to fall back to www user
}


_set_buildargs() {
    export BUILDARGS="
        --build-arg SHIBDUSER=$SHIBDUSER
        --build-arg SHIBDUID=$SHIBDUID
        --build-arg HTTPDUSER=$HTTPDUSER
        --build-arg HTTPDUID=$HTTPDUID
    "
    export REPO_STATUS='True'  # if set: generate 'REPO_STATUS' file to be included in docker image at /opt/etc/
    export MANIFEST_SCOPE='local'  # valid values: 'global', 'local'. Extension for manifest library.
                                   # must be local for targets. Requires write access to git for 'global'.
}


_set_run_args() {
    LOGPURGEFILES='/var/log/httpd/* /var/log/shibboleth/*'
    export ENVSETTINGS="
        -e SHIBDUSER=$SHIBDUSER
        -e HTTPDUSER=$HTTPDUSER
        -e LOGPURGEFILES
    "
    #export STARTCMD=''  # unset or blank to use image default
}


create_intercontainer_network() {
    # Create a local network on the docker host. As the default docker0 bridge has dynamic
    # addresses, a custom bridge is created allowing predictable addresses.
    network='dockernet'
    set +e  # errexit off
    $sudo docker network ls | awk '{print $2}' | grep $network > /dev/null
    if (( $? == 1)); then
        $sudo docker network create --driver bridge --subnet=10.1.1.0/24 \
                  -o com.docker.network.bridge.name=br-$network $network
    fi
    export NETWORKSETTINGS="
        --net $network
        --ip 10.1.1.${imgid}
    "
}


setup_vol_mapping() {
    # Create docker volume (-> map_docker_volume) or map a host dir (-> map_host_directory)
    # In both cases create a shortcut in the shortcut directory (dockervol_short, dockerlog_short)
    mode=$1  # create (used by run.sh)/list (used by manage.sh)
    VOLLIST=''
    VOLMAPPING=''
    create_user $SHIBDUSER $SHIBDUID
    create_user $HTTPDUSER $HTTPDUID

    map_docker_volume $mode "${CONTAINERNAME}.etc_httpd_conf" '/etc/httpd/conf' 'Z' $dockervol_short
    map_docker_volume $mode "${CONTAINERNAME}.etc_httpd_conf.d" '/etc/httpd/conf.d' 'Z' $dockervol_short
    map_docker_volume $mode "${CONTAINERNAME}.etc_shibboleth" '/etc/shibboleth' 'Z' $dockervol_short
    map_docker_volume $mode "${CONTAINERNAME}.etc_shibboleth-ds" '/etc/shibboleth-ds' 'Z' $dockervol_short
    map_docker_volume $mode "${CONTAINERNAME}.opt_etc" '/opt/etc' 'Z' $dockervol_short
    map_docker_volume $mode "${CONTAINERNAME}.run_httpd" '/run/httpd' 'Z' $dockervol_short
    map_docker_volume $mode "${CONTAINERNAME}.var_log" '/var/log' 'Z' $dockerlog_short
    map_docker_volume $mode "${CONTAINERNAME}.var_www" '/var/www' 'Z' $dockervol_short
    #map_docker_volume $mode "${CONTAINERNAME}.var_cache" '/var/cache' 'Z' $dockerlog_short  # provide this for faster startup - otherwise a new container might have to fetch metadata first


    export LOGFILES="
        ${dockerlog_short}/${CONTAINERNAME}.var_log/shibboleth/shibd.log
    "
        #${dockerlog_short}/${CONTAINERNAME}.var_log/httpd/sp1TestWpvPortalverbundAt_access.log
}


container_status() {
    $sudo docker ps | head -1
    $sudo docker ps --all | egrep $CONTAINERNAME\$
}


logrotate() {
    find $dockerlog_short/${CONTAINERNAME}.var_log/ -mtime +5 -exec ls -ld {} \;
}


main $@
